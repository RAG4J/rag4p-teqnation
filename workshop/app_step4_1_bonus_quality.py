from rag4p.indexing.indexing_service import IndexingService
from rag4p.indexing.splitters.sentence_splitter import SentenceSplitter
from rag4p.integrations.openai.openai_embedder import OpenAIEmbedder
from rag4p.integrations.weaviate.access_weaviate import AccessWeaviate
from rag4p.integrations.weaviate.weaviate_retriever import WeaviateRetriever
from rag4p.rag.embedding.local.onnx_embedder import OnnxEmbedder
from rag4p.rag.retrieval.quality.retrieval_quality_service import read_question_answers_from_file, \
    obtain_retrieval_quality
from rag4p.rag.store.local.internal_content_store import InternalContentStore
from rag4p.util.key_loader import KeyLoader

from workshop.teqnation.teqnation_content_reader import TeqnationContentReader

if __name__ == '__main__':
    """
    This script is a bonus step that shows how to determine the quality of your RAG system. The quality is depending on
    the quality of all components. First we have the retriever that finds the relevant items for the question. The
    retriever strategy constructs the context. The generator is responsible for answering the question. If the generated
    answer is no answer to the question, the quality is low. If the generator creates a good answer to the question, we
    still need to verify if the answer is related to the context. If the answer is not related to the context, the 
    quality is low. Therefore we have three quality metrics:
    - Retrieval quality
    - Answer to question quality
    - Answer from context quality
    
    In this script you explore all three quality metrics.
    """

    from dotenv import load_dotenv

    load_dotenv()

    key_loader = KeyLoader()

    ############################################################
    # Retrieval quality
    ############################################################
    """
    Before you run the quality metrics for the receiver, you need to understand what we are doing. We have generated a 
    file with a question for each indexed chunk. The question is generated by the OpenAI question generator. Now, when 
    we ask the retriever the question we expect the retriever to find the correct chunk. If the retriever finds the
    correct chunk, the quality is high. If the retriever finds the wrong chunk, the quality is low. The quality is
    determined by the precision. The precision is the number of correct retrievals divided by the total number of
    retrievals. The total number of retrievals is the total number of questions. The precision is a number between 0 and
    1. The higher the number, the better the quality.
    """
    embedder = OnnxEmbedder()
    content_store = InternalContentStore(embedder=embedder)
    indexing_service = IndexingService(content_store=content_store)
    indexing_service.index_documents(content_reader=TeqnationContentReader(), splitter=SentenceSplitter())

    question_answer_records = read_question_answers_from_file(file_name="../data/teqnation_questions_answers.csv")
    retriever_quality = obtain_retrieval_quality(question_answer_records=question_answer_records,
                                                 retriever=content_store)

    print(f"Quality using precision: {retriever_quality.precision()}")
    print(f"Total questions: {retriever_quality.total_questions()}")
    # For my run the quality was 0.782

    # TODO 1: Rewrite the embedder and the content store to use the OpenAIEmbedder and the WeaviateRetriever
    #  It is safe to skip if you have little time left. Did the quality improve? Why?
    # begin solution
    embedder = OpenAIEmbedder(api_key=key_loader.get_openai_api_key())
    weaviate_client = AccessWeaviate(url=key_loader.get_weaviate_url(), access_key=key_loader.get_weaviate_api_key())
    retriever = WeaviateRetriever(weaviate_access=weaviate_client, embedder=embedder, hybrid=False)
    retriever_quality = obtain_retrieval_quality(question_answer_records=question_answer_records,
                                                 retriever=retriever)

    print(f"Quality using precision: {retriever_quality.precision()}")
    print(f"Total questions: {retriever_quality.total_questions()}")
    # For my run the quality was 0.908
    # end solution
    weaviate_client.close()
